name: Build Spring Boot and ReactJS Project

on:
  push:
    branches:
      - main
      - 'release/**'
      # Comment out the following line to stop GHA from running mvm job on mvm branches
      #- 'mvm/**'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Amazon Corretto 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: gradle

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Get the closest tag
        id: tag
        run: |
          TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Build Spring Boot project
        run: ./gradlew clean build -PprojVersion=${{ env.TAG_NAME }}-SNAPSHOT

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/heads/release/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push tag
        id: tag
        run: |
          TAG_NAME="${GITHUB_REF#refs/heads/release/}"
          git tag "v$TAG_NAME"
          git push origin "v$TAG_NAME"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build Spring Boot project as Docker images
        run: |
          ./gradlew build bootBuildImage -PprojVersion=${{ env.TAG_NAME }} -PecrRepo=${{ secrets.AWS_ECR_BASE }} \
          -Daws.accessKeyId=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -Daws.secretAccessKey=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -Daws.region=${{ secrets.AWS_DEFAULT_REGION }} \
          -Daws.bucketName=${{ secrets.AWS_BUCKET }}

      - name: Log in to Amazon ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_BASE }}

      - name: Push Docker images to Amazon ECR
        run: |
          for IMAGE in $(docker images | grep '${{ secrets.AWS_ECR_BASE }}' | sed -E 's/[[:space:]]+/:/g' | cut -d':' -f'1-2'); do
            docker push $IMAGE
          done

  mvm:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/heads/mvm/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push tag
        id: tag
        run: |
          TAG_NAME=mvm
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      # There are options here. Could implement conditional steps that publish to S3 or ECR
      # To publish to S3 requires the `publish` gradle task to be added to command
      # To build and publish to ECR requires the `bootBuildImage` gradle task to be added to command
      # TODO: Check if AWS properties are required for ECR

      - name: Build Spring Boot project with tag
        run: |
          ./gradlew build bootBuildImage -PprojVersion=${{ env.TAG_NAME }} -PecrRepo=${{ secrets.AWS_ECR_BASE }} \
          -Daws.accessKeyId=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -Daws.secretAccessKey=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -Daws.region=${{ secrets.AWS_DEFAULT_REGION }} \
          -Daws.bucketName=${{ secrets.AWS_BUCKET }}

      - name: Log in to Amazon ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_BASE }}

      - name: Push Docker image to Amazon ECR
        run: |
          for IMAGE in $(docker images | grep '${{ secrets.AWS_ECR_BASE }}' | sed -E 's/[[:space:]]+/:/g' | cut -d':' -f'1-2'); do
            echo docker push $IMAGE
            docker push $IMAGE
          done
